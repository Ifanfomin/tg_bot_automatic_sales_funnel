import logging
import os
from dotenv import load_dotenv
import psycopg2
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton


load_dotenv()

ALLOWED_USER_IDS = {}

logging.basicConfig(level=logging.INFO)

bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher(bot, storage=MemoryStorage())
logging_middleware = LoggingMiddleware()

conn = psycopg2.connect(
    host=os.getenv("DB_HOST"),
    user=os.getenv("DB_USER"),
    password=os.getenv("DB_PASS"),
    database=os.getenv("DB_NAME")
)
cursor = conn.cursor()
cursor.execute('CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY, name TEXT, phone TEXT, instagram TEXT)')
conn.commit()

class EditStates(StatesGroup):
    edit_name = State()
    edit_phone = State()
    edit_instagram = State()

class RegistrationStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_instagram = State()

def get_start_register_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("/register"))
    return keyboard

@dp.message_handler(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É /register –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ", reply_markup=get_start_register_keyboard())

@dp.message_handler(Command("register"))
async def register(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT * FROM users WHERE user_id=%s", (user_id,))
    existing_user = cursor.fetchone()

    if existing_user:
        await message.answer("–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    else:
        await message.answer("–ü—Ä–æ—Ö–æ–¥—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ç—ã –¥–∞—ë—à—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        await RegistrationStates.waiting_for_name.set()

@dp.message_handler(state=RegistrationStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
        await message.answer("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

    await RegistrationStates.waiting_for_phone.set()

@dp.message_handler(lambda message: not message.text.isdigit() or len(message.text) < 11, state=RegistrationStates.waiting_for_phone)
async def process_phone_invalid(message: types.Message):
    await message.reply("–ù–µ pizd–∏ –º–Ω–µ —Ç—É—Ç ü§≠ ‚Äì –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")

@dp.message_handler(lambda message: message.text.isdigit(), state=RegistrationStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone'] = message.text
        await message.answer("–í–≤–µ–¥–∏ –Ω–∏–∫–Ω–µ–π–º Instagram:")

    await RegistrationStates.waiting_for_instagram.set()

@dp.message_handler(state=RegistrationStates.waiting_for_instagram)
async def process_instagram(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['instagram'] = message.text
        user_id = message.from_user.id
        name = data['name']
        phone = data['phone']
        instagram = data['instagram']
        cursor.execute("INSERT INTO users (user_id, name, phone, instagram) VALUES (%s, %s, %s, %s)",
                       (user_id, name, phone, instagram))
        conn.commit()

        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!")

    await state.finish()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π
    await bot.send_message(user_id, "–ë–µ–≥–æ–º —Å–º–æ—Ç—Ä–∏", reply_markup=get_link_keyboard())
    await bot.send_message(user_id, "–ß—Ç–æ–±—ã –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É  ‚Äî ¬´–° –∫–µ–º —Å–≤—è–∑–∞—Ç—å—Å—è?¬ª")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–° –∫–µ–º —Å–≤—è–∑–∞—Ç—å—Å—è?"
def get_link_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("–° –∫–µ–º —Å–≤—è–∑–∞—Ç—å—Å—è?"))
    return keyboard


@dp.message_handler(lambda message: message.text == "–° –∫–µ–º —Å–≤—è–∑–∞—Ç—å—Å—è?")
async def contact_me(message: types.Message):
    await message.answer("")


@dp.message_handler(Command("bd"), user_id=ALLOWED_USER_IDS)
async def show_database(message: types.Message):
    cursor.execute("SELECT * FROM users")
    users = cursor.fetchall()
    if users:
        response = "–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for user in users:
            response += f"ID: {user[0]}\n–ò–º—è: {user[1]}\n–¢–µ–ª–µ—Ñ–æ–Ω: {user[2]}\nInstagram: {user[3]}\n\n"
        await message.answer(response, parse_mode=None)
    else:
        await message.answer("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞.")




@dp.message_handler(Command("edit_name"))
async def edit_name_start(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    await EditStates.edit_name.set()

@dp.message_handler(state=EditStates.edit_name)
async def edit_name_process(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
        user_id = message.from_user.id
        new_name = data['name']
        cursor.execute("UPDATE users SET name=%s WHERE user_id=%s", (new_name, user_id))
        conn.commit()
        await message.answer("–ò–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    await state.finish()

@dp.message_handler(Command("edit_phone"))
async def edit_phone_start(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    await EditStates.edit_phone.set()

@dp.message_handler(state=EditStates.edit_phone)
async def edit_phone_process(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone'] = message.text
        user_id = message.from_user.id
        new_phone = data['phone']
        cursor.execute("UPDATE users SET phone=%s WHERE user_id=%s", (new_phone, user_id))
        conn.commit()
        await message.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
    await state.finish()

@dp.message_handler(Command("edit_instagram"))
async def edit_instagram_start(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º Instagram –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    await EditStates.edit_instagram.set()

@dp.message_handler(state=EditStates.edit_instagram)
async def edit_instagram_process(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['instagram'] = message.text
        user_id = message.from_user.id
        new_instagram = data['instagram']
        cursor.execute("UPDATE users SET instagram=%s WHERE user_id=%s", (new_instagram, user_id))
        conn.commit()
        await message.answer("–ù–∏–∫–Ω–µ–π–º Instagram —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
    await state.finish()

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
